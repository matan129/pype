#!/usr/bin/env python3

import sys
import argparse
from textwrap import indent, dedent


def try_iter(value):
    if value is None:
        return []

    if isinstance(value, str):
        return [value]

    try:
        return iter(value)
    except TypeError:
        return [value]


def process_stdin(callback):
    for line in sys.stdin:
        for ret_line in try_iter(callback(line)):
            print(ret_line)


def main(callback_str: str, verbose: bool):
    user_callback_code = dedent("""
        def user_callback(line):
          l = line.rstrip("\\n")
          p = print
      """).lstrip()

    if len(callback_str.splitlines()) == 1 and not callback_str.startswith("return"):
        callback_str = f"return {callback_str}"

    user_callback_code += indent(callback_str, "  ")

    try:
        exec(user_callback_code, globals())
    except Exception as e:
        print("Error: failed to evaluate the provided callback", end="", flush=True, file=sys.stderr)

        if not verbose:
            print(", use --verbose/-v to print the evaluated code and exception", file=sys.stderr)
            exit(2)
        else:
            print(", this is the evaulated code:", file=sys.stderr)
            print("---")
            print(user_callback_code, file=sys.stderr)
            print("---")
            raise e

    process_stdin(user_callback)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            prog="pype", 
            description="Pythonic utiliy to transform stdin.", 
            formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "py_code",
        metavar="PYTHON_CODE",
        type=str,
        help=dedent("""
        Python 3 code that processes a line of stdin, 
        available as a `l` or `line` variables.

        The code is evaulated in a function. Use 2-spaces indentation.

        Return values are printed. If the retun value is a non-string iterable, each value will be printed separately.
        You can also print using the built-in `print` function, abbreviated as `p`.
        """).strip())
    parser.add_argument("--verbose", "-v", action="store_true", default=False)
    args = parser.parse_args()

    main(dedent(args.py_code), args.verbose)

